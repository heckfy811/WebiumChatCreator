from aiogram.filters import CommandStart
from aiogram import Router

from aiogram.fsm.context import FSMContext

from aiogram.types import Message, FSInputFile

from keyboards import kb
from db import db
from states.states import Mentor

router = Router()

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ
    mentor = db.get_mentor(message.from_user.id)
    if mentor:
        await message.answer(text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {mentor[2]}! üöÄ")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.start_kb)
    else:
        await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –±–µ—Å–µ–¥ —Å —É—á–µ–Ω–∏–∫–∞–º–∏\n\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–∫–∞–∫ –±—É–¥–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –≥—Ä—É–ø–ø):")
        await state.set_state(Mentor.mentor_name)

@router.message(Mentor.mentor_name)
async def set_mentor_name(message: Message, state: FSMContext):
    photo = FSInputFile("static/token.png")
    await state.update_data(mentor_name=message.text)
    await message.answer_photo(photo, caption="–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, —è –≤–µ—Ä—é\n"
                                              "1. –ó–∞–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–∞ –≤ –∞–¥–º–∏–Ω–∫–µ\n"
                                              "2. –ù–∞–∂–º–∏ F12\n"
                                              "3. –í –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –ø–∞–Ω–µ–ª—å–∫–µ –Ω–∞–∂–º–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Network\n"
                                              "4. –í—ã–±–µ—Ä–∏ Fetch/XHR\n"
                                              "5. –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
                                              "6. –í—ã–±–µ—Ä–∏ –∑–∞–ø—Ä–æ—Å me/\n"
                                              "7. –í Headers –ø—Ä–æ–ª–∏—Å—Ç–∞–π –Ω–∏–∂–µ, —Å–∫–æ–ø–∏—Ä—É–π –∑–Ω–∞—á–µ–Ω–∏–µ Authorization –ø–æ—Å–ª–µ 'Bearer' –∏ –∫–∏–Ω—å —Å—é–¥–∞")
    await state.set_state(Mentor.refresh_token)

@router.message(Mentor.refresh_token)
async def set_mentor_token(message: Message, state: FSMContext):
    await state.update_data(refresh_token=message.text)
    data = await state.get_data()
    db.save_mentor(message.from_user.id, data["mentor_name"] ,message.text)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {data["mentor_name"]}! –¢–µ–ø–µ—Ä—å —è –≤—Å–µ –∑–∞–ø–æ–º–Ω–∏–ª ‚ú®")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.start_kb)