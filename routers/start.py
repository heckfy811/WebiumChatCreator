from aiogram.filters import CommandStart
from aiogram import Router

from aiogram.fsm.context import FSMContext

from aiogram.types import Message

from keyboards import kb
from db import db
from states.states import Mentor

router = Router()

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ
    mentor_name = db.get_mentor(message.from_user.id)
    if mentor_name:
        await message.answer(text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {mentor_name}! üöÄ")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.start_kb)
    else:
        await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(Mentor.mentor_name)

@router.message(Mentor.mentor_name)
async def set_mentor_name(message: Message, state: FSMContext):
    db.save_mentor(message.from_user.id, message.text)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ—ë –∏–º—è ‚ú®")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.start_kb)